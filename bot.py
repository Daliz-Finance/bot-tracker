import sqlite3
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, ChatMemberUpdated
from aiogram.client.default import DefaultBotProperties
from datetime import datetime

TOKEN = "BOT_TOKEN"

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
conn = sqlite3.connect("chat_activity.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS activity (
    user_id INTEGER,
    username TEXT,
    first_name TEXT,
    last_name TEXT,
    timestamp TEXT,
    action TEXT
)''')
conn.commit()

# –õ–æ–≥—É–≤–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–±–µ–∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤ –≥—Ä—É–ø—É)
async def log_activity(user: types.User, action: str):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    cursor.execute("INSERT INTO activity (user_id, username, first_name, last_name, timestamp, action) VALUES (?, ?, ?, ?, ?, ?)",
                   (user.id, user.username, user.first_name, user.last_name, timestamp, action))
    conn.commit()

@dp.message()
async def track_activity(message: Message):
    print(f"üì© –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {message.from_user.username or message.from_user.first_name}: {message.text}")

    # –ó–∞–ø–∏—Å—É—î–º–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —É –±–∞–∑—É, –∞–ª–µ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –≤ –≥—Ä—É–ø—É
    await log_activity(message.from_user, "message")

    # –Ø–∫—â–æ —Ü–µ –∫–æ–º–∞–Ω–¥–∞ /stats ‚Üí –∑–∞–ø—É—Å–∫–∞—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if message.text and message.text.strip().lower() == "/stats":
        print("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /stats –æ—Ç—Ä–∏–º–∞–Ω–∞!")
        await send_stats(message)

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏, —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
async def is_admin(chat_id: int, user_id: int):
    chat_member = await bot.get_chat_member(chat_id, user_id)
    return chat_member.status in ["administrator", "creator"]

# –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–¥–º—ñ–Ω—É –≤ –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
async def send_stats(message: Message):
    user_id = message.from_user.id
    chat_id = message.chat.id

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if not await is_admin(chat_id, user_id):
        print("‚õî –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, —ñ–≥–Ω–æ—Ä—É—î–º–æ –∫–æ–º–∞–Ω–¥—É.")
        return  # –ë–æ—Ç –ø—Ä–æ—Å—Ç–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î

    print(f"üìä –í–∏–∫–æ–Ω—É—é SQL-–∑–∞–ø–∏—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")

    cursor.execute("SELECT user_id, username, first_name, COUNT(*) FROM activity GROUP BY user_id")
    rows = cursor.fetchall()

    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç SQL-–∑–∞–ø–∏—Ç—É: {rows}")

    if not rows:
        print("‚ÑπÔ∏è –ù–µ–º–∞—î –∑—ñ–±—Ä–∞–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        await bot.send_message(user_id, "‚ÑπÔ∏è –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.")
        return

    # –§–æ—Ä–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
    stats_message = "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –≤ —á–∞—Ç—ñ:</b>\n"
    for row in rows:
        user_info = row[1] if row[1] else row[2]  # –Ø–∫—â–æ –Ω–µ–º–∞—î username, –±–µ—Ä–µ–º–æ —ñ–º'—è
        stats_message += f"üë§ {user_info}: {row[3]} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å\n"

    try:
        print(f"üìä –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–¥–º—ñ–Ω—É ({user_id}) –≤ –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...")
        await bot.send_message(user_id, stats_message, parse_mode="HTML")
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º—ñ–Ω—É!")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await message.reply("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –æ—Å–æ–±–∏—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –ù–∞–ø–∏—à—ñ—Ç—å –±–æ—Ç—É –≤ –ø—Ä–∏–≤–∞—Ç–Ω–∏–π —á–∞—Ç `/start`, —â–æ–± –≤—ñ–Ω –º—ñ–≥ –≤–∞–º –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏.")

async def main():
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ —ñ —á–µ–∫–∞—î –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...")

    dp.message.register(track_activity)  # –û–±—Ä–æ–±–ª—è—î–º–æ –≤—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∞–ª–µ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –Ω–∞ –Ω–∏—Ö

    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot, allowed_updates=["message"])

if __name__ == "__main__":
    asyncio.run(main())
