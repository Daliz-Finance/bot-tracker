import sqlite3
import asyncio
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.client.default import DefaultBotProperties
from datetime import datetime, timedelta

TOKEN = os.getenv("TOKEN")  # –ë–µ—Ä–µ —Ç–æ–∫–µ–Ω –∑ Render (Environment Variable)

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
conn = sqlite3.connect("chat_activity.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS activity (
    user_id INTEGER,
    username TEXT,
    first_name TEXT,
    last_name TEXT,
    timestamp TEXT,
    action TEXT
)''')
conn.commit()

# –õ–æ–≥—É–≤–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
async def log_activity(user: types.User, action: str):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    cursor.execute("INSERT INTO activity (user_id, username, first_name, last_name, timestamp, action) VALUES (?, ?, ?, ?, ?, ?)",
                   (user.id, user.username, user.first_name, user.last_name, timestamp, action))
    conn.commit()

@dp.message()
async def track_activity(message: Message):
    print(f"üì© –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ {message.from_user.username or message.from_user.first_name}: {message.text}")
    await log_activity(message.from_user, "message")

    if message.text and message.text.strip().lower() == "/stats":
        print("‚úÖ –ö–æ–º–∞–Ω–¥–∞ /stats –æ—Ç—Ä–∏–º–∞–Ω–∞!")
        await send_stats(message)

async def is_admin(chat_id: int, user_id: int):
    chat_member = await bot.get_chat_member(chat_id, user_id)
    return chat_member.status in ["administrator", "creator"]

# –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤
async def send_stats(message: Message):
    user_id = message.from_user.id
    chat_id = message.chat.id

    if not await is_admin(chat_id, user_id):
        print("‚õî –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return

    since = (datetime.now() - timedelta(days=7)).strftime("%Y-%m-%d %H:%M:%S")
    cursor.execute("SELECT user_id, username, first_name, COUNT(*) FROM activity WHERE timestamp >= ? GROUP BY user_id", (since,))
    rows = cursor.fetchall()

    if not rows:
        await bot.send_message(user_id, "‚ÑπÔ∏è –î–∞–Ω—ñ –ø—Ä–æ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –≤—ñ–¥—Å—É—Ç–Ω—ñ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤.")
        return

    stats_message = "üìä <b>–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —É—á–∞—Å–Ω–∏–∫—ñ–≤ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤:</b>\n"
    for row in rows:
        name = row[1] if row[1] else row[2]
        stats_message += f"üë§ {name}: {row[3]} –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å\n"

    try:
        await bot.send_message(user_id, stats_message)
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ: {e}")
        await message.reply("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –ù–∞–ø–∏—à—ñ—Ç—å –±–æ—Ç—É /start —É –ø—Ä–∏–≤–∞—Ç.")

async def main():
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ —ñ —á–µ–∫–∞—î –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...")
    dp.message.register(track_activity)
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot, allowed_updates=["message"])

if __name__ == "__main__":
    asyncio.run(main())
